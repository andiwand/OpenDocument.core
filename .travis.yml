language: cpp

git:
  depth: false

os: linux
dist: bionic

compiler: clang

python: "3.6"

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - sourceline: "deb https://apt.llvm.org/xenial/ llvm-toolchain-xenial-9 main"
      key_url: "https://apt.llvm.org/llvm-snapshot.gpg.key"
    packages:
      - clang-9
  snaps:
    - tidy

env:
  global:
    - CORE_REF=${CORE_REF:-master}
    - TEST_REPO=https://github.com/TomTasche/OpenDocument.test.git
    - PYTHON=3.6
    # repo dir
    - CORE_DIR=$TRAVIS_BUILD_DIR
    - TEST_DIR=$TRAVIS_BUILD_DIR/../OpenDocument.test
    # tool
    - TOOL_DIR=$HOME/tools
    - TRANSLATION_TOOL=$TOOL_DIR/translate.py
    - RENDER_TOOL=$TOOL_DIR/render.py
    - IMAGEDIFF_TOOL=$TOOL_DIR/imagediff.py
    # build
    - BUILD_DIR_LATEST=$HOME/build-latest
    - BUILD_DIR_REFERENCE=$HOME/build-reference
    # output
    - OUTPUT_DIR=$HOME/output
    - OUTPUT_DIR_LATEST_HTML=$OUTPUT_DIR/latest/html
    - OUTPUT_DIR_LATEST_IMAGE=$OUTPUT_DIR/latest/image
    - OUTPUT_DIR_REFERENCE_HTML=$OUTPUT_DIR/reference/html
    - OUTPUT_DIR_REFERENCE_IMAGE=$OUTPUT_DIR/reference/image

cache:
  ccache: true
  pip: true
  directories:
    - $TEST_DIR

before_install:
  # get test repo
  - echo -e "machine github.com\n  login $CI_USER_TOKEN" > ~/.netrc
  - |
    if [ ! -d $TEST_DIR ] || [ -z "$(ls -A $TEST_DIR)"]; then
      git clone $TEST_REPO $TEST_DIR
    else
      git -C $TEST_DIR pull
    fi
  # set python version
  - pyenv global $PYTHON

install:
  # copy tools
  - cp -a $CORE_DIR/.travis $TOOL_DIR
  # python tools dependencies
  - pip install -r .travis/requirements.txt

script:
  # build latest
  - cd $CORE_DIR
  - git log --pretty=oneline --abbrev-commit -n 5
  - mkdir -p $BUILD_DIR_LATEST
  - cd $BUILD_DIR_LATEST
  - cmake $CORE_DIR
  - cmake --build .

  # run unit tests
  - $BUILD_DIR_LATEST/test/odr_test

  # run latest translation
  - mkdir -p $OUTPUT_DIR_LATEST_HTML
  - $TRANSLATION_TOOL $BUILD_DIR_LATEST/cli/translate $OUTPUT_DIR_LATEST_HTML $TEST_DIR/od?/* $TEST_DIR/???x/*

  # run latest render
  - mkdir -p $OUTPUT_DIR_LATEST_IMAGE
  - $RENDER_TOOL "phantomjs $TOOL_DIR/render.js" $OUTPUT_DIR_LATEST_IMAGE $OUTPUT_DIR_LATEST_HTML/*.html

  # build reference
  - cd $CORE_DIR
  - git checkout $CORE_REF
  - git log --pretty=oneline --abbrev-commit -n 5
  - mkdir -p $BUILD_DIR_REFERENCE
  - cd $BUILD_DIR_REFERENCE
  - cmake $CORE_DIR
  - cmake --build .

  # run reference translation
  - mkdir -p $OUTPUT_DIR_REFERENCE_HTML
  - $TRANSLATION_TOOL $BUILD_DIR_REFERENCE/cli/translate $OUTPUT_DIR_REFERENCE_HTML $TEST_DIR/od?/* $TEST_DIR/???x/*

  # run reference render
  - mkdir -p $OUTPUT_DIR_REFERENCE_IMAGE
  - $RENDER_TOOL "phantomjs $TOOL_DIR/render.js" $OUTPUT_DIR_REFERENCE_IMAGE $OUTPUT_DIR_REFERENCE_HTML/*.html

  # tidy and compare html output
  - tidy -i -m -w 160 -ashtml -utf8 $OUTPUT_DIR_LATEST_HTML/*.html 2> /dev/null || true # TODO remove null and true
  - tidy -i -m -w 160 -ashtml -utf8 $OUTPUT_DIR_REFERENCE_HTML/*.html 2> /dev/null || true # TODO remove null and true
  - diff -qrN $OUTPUT_DIR_LATEST_HTML $OUTPUT_DIR_REFERENCE_HTML

  # compare image output
  - $IMAGEDIFF_TOOL --ssim-limit 0.99 $OUTPUT_DIR_LATEST_IMAGE $OUTPUT_DIR_REFERENCE_IMAGE
